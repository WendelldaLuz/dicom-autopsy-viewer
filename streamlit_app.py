import streamlit as st
import pydicom
import numpy as np
import matplotlib.pyplot as plt
import os
import tempfile
import warnings
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage
from email.mime.application import MIMEApplication
import pandas as pd
from datetime import datetime
from io import BytesIO
import plotly.graph_objects as go
import plotly.express as px
import json
import sqlite3
from PIL import Image
import logging

# Configurar logging de seguran√ßa
logging.basicConfig(
    filename='security.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# Suprimir warnings
warnings.filterwarnings("ignore", message=".*missing ScriptRunContext.*")
warnings.filterwarnings("ignore", category=UserWarning)

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="DICOM Autopsy Viewer",
    page_icon="üî¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado - Tema aut√≥psia virtual
st.markdown("""
<style>
    .main { background: #1a1a1a; }
    .stApp { background: #0d0d0d; color: #ffffff; }
    .main-header { font-size: 2.5rem; color: #ffffff !important; text-align: center; font-weight: 700; }
    .sub-header { font-size: 1.5rem; color: #ffffff !important; font-weight: 600; }
    p, div, span, label { color: #e0e0e0 !important; }
    .card { background: #2d2d2d; padding: 20px; border-radius: 12px; margin-bottom: 20px; border-left: 4px solid #00bcd4; }
    .patient-card { border-left: 4px solid #ff5252; }
    .tech-card { border-left: 4px solid #4caf50; }
    .image-card { border-left: 4px solid #9c27b0; }
    .stats-card { border-left: 4px solid #ff9800; }
    .login-card { border-left: 4px solid #00bcd4; background: #2d2d2d; padding: 30px; border-radius: 15px; }
    .feedback-card { border-left: 4px solid #ff9800; background: #2d2d2d; padding: 20px; border-radius: 12px; }
    .stButton>button { background: linear-gradient(45deg, #00bcd4, #00838f); color: white !important; border-radius: 8px; padding: 12px 24px; }
    .uploaded-file { background: #333333; padding: 12px; border-radius: 8px; margin: 8px 0; border-left: 3px solid #00bcd4; }
    .metric-value { font-size: 1.3rem; font-weight: 700; color: #00bcd4 !important; }
    .metric-label { font-size: 0.9rem; color: #b0b0b0 !important; font-weight: 500; }
    .file-size { color: #00bcd4; font-size: 0.8rem; margin-top: 5px; }
    .upload-info { background: #2d2d2d; padding: 15px; border-radius: 10px; margin: 10px 0; border-left: 4px solid #4caf50; }
    .star-rating { font-size: 2rem; color: #ffd700; margin: 10px 0; }
    .security-alert { background: #ffebee; color: #c62828; padding: 10px; border-radius: 5px; border-left: 4px solid #c62828; }
</style>
""", unsafe_allow_html=True)

# Configura√ß√£o do banco de dados para feedback
DB_PATH = "feedback_database.db"

# Configura√ß√µes de email (USE SENHA DE APP DO GMAIL)
EMAIL_CONFIG = {
    'sender': 'wenndell.luz@gmail.com',
    'password': 'sua_senha_de_app_do_gmail',
    'smtp_server': 'smtp.gmail.com',
    'smtp_port': 587
}

# Limite de rate limiting
UPLOAD_LIMITS = {
    'max_files': 10,
    'max_size_mb': 2000,
    'max_uploads_per_hour': 5
}

def init_database():
    """Inicializa o banco de dados para feedback"""
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS feedback
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      user_email TEXT,
                      feedback_text TEXT,
                      rating INTEGER,
                      report_data TEXT,
                      timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
        c.execute('''CREATE TABLE IF NOT EXISTS system_learning
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      error_type TEXT,
                      error_message TEXT,
                      solution_applied TEXT,
                      occurrence_count INTEGER DEFAULT 1,
                      last_occurrence DATETIME DEFAULT CURRENT_TIMESTAMP)''')
        c.execute('''CREATE TABLE IF NOT EXISTS security_logs
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      event_type TEXT,
                      user_ip TEXT,
                      user_agent TEXT,
                      details TEXT,
                      timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
        conn.commit()
        conn.close()
    except Exception as e:
        log_security_event("DATABASE_ERROR", f"Erro ao inicializar banco: {e}")

def log_security_event(event_type, details):
    """Registra eventos de seguran√ßa"""
    try:
        user_ip = "unknown"
        user_agent = "unknown"
        
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute('''INSERT INTO security_logs (event_type, user_ip, user_agent, details)
                     VALUES (?, ?, ?, ?)''', 
                 (event_type, user_ip, user_agent, details))
        conn.commit()
        conn.close()
        
        logging.info(f"SECURITY - {event_type}: {details}")
    except Exception as e:
        logging.error(f"Erro ao registrar evento de seguran√ßa: {e}")

def validate_dicom_file(file):
    """Valida se √© um arquivo DICOM real"""
    try:
        # Salva a posi√ß√£o original
        original_position = file.tell()
        
        # Verifica assinatura DICOM (128 bytes + 'DICM')
        file.seek(128)
        signature = file.read(4)
        file.seek(original_position)  # Volta para posi√ß√£o original
        
        if signature == b'DICM':
            return True
        else:
            log_security_event("INVALID_FILE", "Arquivo n√£o √© DICOM v√°lido")
            return False
    except Exception as e:
        log_security_event("FILE_VALIDATION_ERROR", f"Erro na valida√ß√£o: {e}")
        return False

def sanitize_patient_data(dataset):
    """Remove dados sens√≠veis se necess√°rio"""
    try:
        sensitive_tags = ['PatientName', 'PatientID', 'PatientBirthDate', 'ReferringPhysicianName']
        
        for tag in sensitive_tags:
            if hasattr(dataset, tag):
                original_value = getattr(dataset, tag)
                setattr(dataset, tag, "REDACTED")
                log_security_event("DATA_SANITIZED", f"Campo {tag} redacted")
        
        return dataset
    except Exception as e:
        log_security_event("SANITIZATION_ERROR", f"Erro ao sanitizar dados: {e}")
        return dataset

def check_upload_limits(uploaded_files):
    """Verifica limites de upload"""
    try:
        total_size = sum(f.size for f in uploaded_files)
        
        if len(uploaded_files) > UPLOAD_LIMITS['max_files']:
            log_security_event("UPLOAD_LIMIT_EXCEEDED", f"M√°ximo de {UPLOAD_LIMITS['max_files']} arquivos excedido")
            return False, f"M√°ximo de {UPLOAD_LIMITS['max_files']} arquivos permitido"
            
        if total_size > UPLOAD_LIMITS['max_size_mb'] * 1024 * 1024:
            log_security_event("SIZE_LIMIT_EXCEEDED", f"M√°ximo de {UPLOAD_LIMITS['max_size_mb']}MB excedido")
            return False, f"M√°ximo de {UPLOAD_LIMITS['max_size_mb']}MB permitido"
            
        return True, "OK"
    except Exception as e:
        log_security_event("UPLOAD_LIMIT_ERROR", f"Erro ao verificar limites: {e}")
        return False, "Erro ao verificar limites"

def get_file_size(bytes_size):
    """Converte bytes para formato leg√≠vel"""
    for unit in ['B', 'KB', 'MB', 'GB']:
        if bytes_size < 1024.0:
            return f"{bytes_size:.1f} {unit}"
        bytes_size /= 1024.0
    return f"{bytes_size:.1f} TB"

def save_feedback(user_email, feedback_text, rating, report_data):
    """Salva feedback no banco de dados"""
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute('''INSERT INTO feedback (user_email, feedback_text, rating, report_data)
                     VALUES (?, ?, ?, ?)''', 
                 (user_email, feedback_text, rating, json.dumps(report_data)))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        log_security_event("FEEDBACK_ERROR", f"Erro ao salvar feedback: {e}")
        return False  # ‚úÖ return False CORRETO

def send_email_report(user_data, dicom_data, image_data, report_data):  # ‚úÖ FUN√á√ÉO NOVA LINHA
    """Envia relat√≥rio por email"""
    try:
        msg = MIMEMultipart()
        msg['From'] = EMAIL_CONFIG['sender']
        msg['To'] = 'wenndell.luz@gmail.com'
        msg['Subject'] = f'Relat√≥rio de An√°lise DICOM - {datetime.now().strftime("%d/%m/%Y %H:%M")}'
        
        # Corpo do email
        body = f"""
        RELAT√ìRIO DE AN√ÅLISE DICOM - DICOM AUTOPSY VIEWER
        =================================================
        
        DADOS DO USU√ÅRIO:
        - Nome: {user_data['nome']}
        - Departamento: {user_data['departamento']}
        - Email: {user_data['email']}
        - Contato: {user_data['contato']}
        - Data da An√°lise: {datetime.now().strftime("%d/%m/%Y %H:%M")}
        
        DADOS DO EXAME:
        - Arquivo: {dicom_data.get('file_name', 'N/A')}
        - Tamanho: {dicom_data.get('file_size', 'N/A')}
        - Paciente: {dicom_data.get('patient_name', 'N/A')}
        - ID: {dicom_data.get('patient_id', 'N/A')}
        - Modalidade: {dicom_data.get('modality', 'N/A')}
        - Data do Exame: {dicom_data.get('study_date', 'N/A')}
        
        ESTAT√çSTICAS DA IMAGEM:
        - Dimens√µes: {report_data.get('dimensoes', 'N/A')}
        - Intensidade M√≠nima: {report_data.get('min_intensity', 'N/A')}
        - Intensidade M√°xima: {report_data.get('max_intensity', 'N/A')}
        - M√©dia: {report_data.get('media', 'N/A')}
        - Desvio Padr√£o: {report_data.get('desvio_padrao', 'N/A')}
        - Total de Pixels: {report_data.get('total_pixels', 'N/A')}
        """
        
        msg.attach(MIMEText(body, 'plain'))
        
        # Anexar imagem
        if image_data:
            img_byte_arr = BytesIO()
            image_data.save(img_byte_arr, format='PNG')
            img_byte_arr = img_byte_arr.getvalue()
            image_attachment = MIMEImage(img_byte_arr, name='analise_dicom.png')
            msg.attach(image_attachment)
        
        # Anexar relat√≥rio em CSV
        report_df = pd.DataFrame([{
            'Usuario': user_data['nome'],
            'Departamento': user_data['departamento'],
            'Email': user_data['email'],
            'Contato': user_data['contato'],
            'Data_Analise': datetime.now().strftime("%d/%m/%Y %H:%M"),
            'Arquivo': dicom_data.get('file_name', 'N/A'),
            'Tamanho_Arquivo': dicom_data.get('file_size', 'N/A'),
            'Paciente': dicom_data.get('patient_name', 'N/A'),
            'ID_Paciente': dicom_data.get('patient_id', 'N/A'),
            'Modalidade': dicom_data.get('modality', 'N/A'),
            'Data_Exame': dicom_data.get('study_date', 'N/A'),
            'Dimensoes': report_data.get('dimensoes', 'N/A'),
            'Intensidade_Min': report_data.get('min_intensity', 'N/A'),
            'Intensidade_Max': report_data.get('max_intensity', 'N/A'),
            'Media_Intensidade': report_data.get('media', 'N/A'),
            'Desvio_Padrao': report_data.get('desvio_padrao', 'N/A')
        }])
        
        csv_buffer = BytesIO()
        report_df.to_csv(csv_buffer, index=False)
        csv_attachment = MIMEApplication(csv_buffer.getvalue(), name='relatorio_analise.csv')
        csv_attachment['Content-Disposition'] = 'attachment; filename="relatorio_analise.csv"'
        msg.attach(csv_attachment)
        
        # Enviar email
        server = smtplib.SMTP(EMAIL_CONFIG['smtp_server'], EMAIL_CONFIG['smtp_port'])
        server.starttls()
        server.login(EMAIL_CONFIG['sender'], EMAIL_CONFIG['password'])
        server.send_message(msg)
        server.quit()
        
        log_security_event("EMAIL_SENT", "Relat√≥rio enviado com sucesso")
        return True
    except Exception as e:
        error_msg = f"Erro ao enviar email: {str(e)}"
        log_security_event("EMAIL_ERROR", error_msg)
        return False

def safe_dicom_value(value, default="N/A"):
    """Fun√ß√£o segura para obter valores DICOM"""
    try:
        if value is None: return default
        if hasattr(value, '__len__') and len(value) > 100:
            return f"Dados muito grandes ({len(value)} bytes)"
        if hasattr(value, 'original_string'): return str(value.original_string)
        return str(value)
    except Exception as e:
        log_security_event("DICOM_VALUE_ERROR", f"Erro ao obter valor DICOM: {e}")
        return default

def create_medical_visualization(image, title):
    """Cria visualiza√ß√£o m√©dica profissional"""
    fig = go.Figure()
    fig.add_trace(go.Heatmap(z=image, colorscale='gray', showscale=False, hoverinfo='none'))
    fig.update_layout(
        title={'text': title, 'y':0.95, 'x':0.5, 'xanchor': 'center', 'yanchor': 'top', 'font': {'size': 16, 'color': '#ffffff'}},
        width=600, height=500, margin=dict(l=20, r=20, t=60, b=20),
        plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='#1a1a1a',
        xaxis=dict(visible=False, gridcolor='#333333'), yaxis=dict(visible=False, gridcolor='#333333')
    )
    return fig

def create_advanced_histogram(image):
    """Cria histograma avan√ßado"""
    fig = px.histogram(x=image.flatten(), nbins=100, title="Distribui√ß√£o de Intensidade de Pixels",
                      labels={'x': 'Intensidade', 'y': 'Frequ√™ncia'}, color_discrete_sequence=['#00bcd4'])
    fig.update_layout(plot_bgcolor='#1a1a1a', paper_bgcolor='#1a1a1a', font=dict(color='#ffffff'), bargap=0.1)
    return fig

def create_pdf_report(user_data, dicom_data, report_data):
    """Cria relat√≥rio em PDF"""
    from reportlab.lib.pagesizes import A4
    from reportlab.pdfgen import canvas
    from io import BytesIO
    
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=A4)
    
    # Cabe√ßalho
    c.setFont("Helvetica-Bold", 16)
    c.drawString(50, 800, "RELAT√ìRIO DE AN√ÅLISE DICOM")
    c.setFont("Helvetica", 10)
    c.drawString(50, 780, f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    
    # Dados do usu√°rio
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, 750, "DADOS DO ANALISTA:")
    c.setFont("Helvetica", 10)
    c.drawString(50, 730, f"Nome: {user_data['nome']}")
    c.drawString(50, 715, f"Departamento: {user_data['departamento']}")
    c.drawString(50, 700, f"Email: {user_data['email']}")
    c.drawString(50, 685, f"Contato: {user_data['contato']}")
    
    # Dados do exame
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, 650, "DADOS DO EXAME:")
    c.setFont("Helvetica", 10)
    c.drawString(50, 630, f"Arquivo: {dicom_data.get('file_name', 'N/A')}")
    c.drawString(50, 615, f"Tamanho: {dicom_data.get('file_size', 'N/A')}")
    c.drawString(50, 600, f"Paciente: {dicom_data.get('patient_name', 'N/A')}")
    c.drawString(50, 585, f"ID: {dicom_data.get('patient_id', 'N/A')}")
    c.drawString(50, 570, f"Modalidade: {dicom_data.get('modality', 'N/A')}")
    
    # Estat√≠sticas
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, 540, "ESTAT√çSTICAS:")
    c.setFont("Helvetica", 10)
    c.drawString(50, 520, f"Dimens√µes: {report_data.get('dimensoes', 'N/A')}")
    c.drawString(50, 505, f"Intensidade M√≠nima: {report_data.get('min_intensity', 'N/A')}")
    c.drawString(50, 490, f"Intensidade M√°xima: {report_data.get('max_intensity', 'N/A')}")
    c.drawString(50, 475, f"M√©dia: {report_data.get('media', 'N/A')}")
    c.drawString(50, 460, f"Desvio Padr√£o: {report_data.get('desvio_padrao', 'N/A')}")
    c.drawString(50, 445, f"Total de Pixels: {report_data.get('total_pixels', 'N/A')}")
    
    c.save()
    buffer.seek(0)
    return buffer

def show_feedback_section(report_data):
    """Se√ß√£o de feedback"""
    st.markdown("---")
    st.markdown('<div class="feedback-card">', unsafe_allow_html=True)
    st.subheader("üí¨ Feedback do Relat√≥rio")
    
    if not st.session_state.get('feedback_submitted', False):
        with st.form("feedback_form"):
            st.markdown('<div class="star-rating">‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê</div>', unsafe_allow_html=True)
            
            rating = st.slider("Avalia√ß√£o (1-5 estrelas)", 1, 5, 5)
            feedback_text = st.text_area("Coment√°rios ou sugest√µes:", placeholder="O que achou do relat√≥rio? Como podemos melhorar?")
            
            submitted = st.form_submit_button("üì§ Enviar Feedback")
            
            if submitted:
                if save_feedback(st.session_state.user_data['email'], feedback_text, rating, report_data):
                    st.session_state.feedback_submitted = True
                    st.success("‚úÖ Feedback enviado com sucesso! Obrigado por contribuir com a melhoria do sistema.")
                else:
                    st.error("‚ùå Erro ao enviar feedback.")
    else:
        st.success("üìù Obrigado pelo seu feedback! Sua contribui√ß√£o ajuda a melhorar o sistema.")
    
    st.markdown('</div>', unsafe_allow_html=True)

def show_login_page():
    """P√°gina de login/registro"""
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.markdown('<h1 class="main-header">üî¨ DICOM Autopsy Viewer</h1>', unsafe_allow_html=True)
        st.markdown('<p style="text-align: center; color: #b0b0b0 !important; font-size: 1.1rem;">Sistema Profissional para An√°lise Forense</p>', unsafe_allow_html=True)
        
        with st.container():
            st.markdown('<div class="login-card">', unsafe_allow_html=True)
            st.subheader("üìã Acesso ao Sistema")
            
            with st.form("login_form"):
                nome = st.text_input("Nome Completo", placeholder="Digite seu nome completo")
                departamento = st.text_input("Departamento", placeholder="Departamento/Filia√ß√£o")
                email = st.text_input("Email", placeholder="seu.email@exemplo.com")
                contato = st.text_input("Contato", placeholder="Telefone ou outro contato")
                
                submitted = st.form_submit_button("üîì Acessar Sistema")
                
                if submitted:
                    if nome and departamento and email and contato:
                        st.session_state.authenticated = True
                        st.session_state.user_data = {
                            'nome': nome,
                            'departamento': departamento,
                            'email': email,
                            'contato': contato,
                            'data_acesso': datetime.now().strftime("%d/%m/%Y %H:%M")
                        }
                        st.success("‚úÖ Acesso concedido! Carregando sistema...")
                        st.rerun()
                    else:
                        st.error("‚ùå Preencha todos os campos obrigat√≥rios")
            
            st.markdown('</div>', unsafe_allow_html=True)  # ‚úÖ FIM da fun√ß√£o show_login_page

def show_dashboard():  # ‚úÖ IN√çCIO da fun√ß√£o show_dashboard
    """Dashboard inicial"""
    st.markdown("""
    <div style='text-align: center; padding: 40px 20px; background: #2d2d2d; border-radius: 15px; color: #ffffff;'>
        <h2 style='color: #00bcd4 !important;'>üî¨ Bem-vindo ao DICOM Autopsy Viewer</h2>
        <p style='color: #b0b0b0 !important;'>Sistema profissional para an√°lise forense de imagens DICOM</p>
        <div style='font-size: 3rem; margin: 20px 0;'>üî¨üìäüìß</div>
    </div>
    """, unsafe_allow_html=True)
    
    """Dashboard inicial"""
    st.markdown("""
    <div style='text-align: center; padding: 40px 20px; background: #2d2d2d; border-radius: 15px; color: #ffffff;'>
        <h2 style='color: #00bcd4 !important;'>üî¨ Bem-vindo ao DICOM Autopsy Viewer</h2>
        <p style='color: #b0b0b0 !important;'>Sistema profissional para an√°lise forense de imagens DICOM</p>
        <div style='font-size: 3rem; margin: 20px 0;'>üî¨üìäüìß</div>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown("""
        <div class='card'>
            <h4>üíæ Grande Capacidade</h4>
            <p>‚Ä¢ 200MB por arquivo</p>
            <p>‚Ä¢ At√© 10 arquivos por caso</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class='card'>
            <h4>üìä An√°lise Completa</h4>
            <p>‚Ä¢ Visualiza√ß√£o avan√ßada</p>
            <p>‚Ä¢ Estat√≠sticas detalhadas</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class='card'>
            <h4>üìß Integra√ß√£o Total</h4>
            <p>‚Ä¢ Envio autom√°tico por email</p>
            <p>‚Ä¢ Relat√≥rios em PDF</p>
        </div>
        """, unsafe_allow_html=True)

def show_main_app():
    """Aplicativo principal ap√≥s autentica√ß√£o"""
    col1, col2, col3 = st.columns([2, 1, 1])
    with col1:
        st.markdown('<h1 class="main-header">üî¨ DICOM Autopsy Viewer</h1>', unsafe_allow_html=True)
    with col3:
        st.markdown(f'<div style="background: #333; padding: 10px; border-radius: 8px; text-align: center;">'
                   f'<span style="color: #00bcd4;">üë§ {st.session_state.user_data["nome"]}</span><br>'
                   f'<span style="color: #b0b0b0; font-size: 0.8rem;">{st.session_state.user_data["departamento"]}</span>'
                   f'</div>', unsafe_allow_html=True)
        
        if st.button("üö™ Sair"):
            st.session_state.authenticated = False
            st.session_state.user_data = {}
            st.rerun()

    st.markdown("---")

    with st.sidebar:
        st.markdown(f"""
        <div style='background: linear-gradient(135deg, #1a237e, #283593); padding: 15px; border-radius: 10px; color: white; text-align: center;'>
            <h3 style='margin: 0;'>üë§ Usu√°rio Logado</h3>
            <p style='margin: 5px 0; font-size: 0.9rem;'>{st.session_state.user_data['nome']}</p>
            <p style='margin: 0; font-size: 0.8rem;'>{st.session_state.user_data['departamento']}</p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("---")
        
        st.markdown(f"""
        <div class='upload-info'>
            <h4>üìÅ Upload de Exames</h4>
            <p>‚Ä¢ Limite: <strong>{UPLOAD_LIMITS['max_files']} arquivos</strong></p>
            <p>‚Ä¢ Tamanho: <strong>{UPLOAD_LIMITS['max_size_mb']}MB por arquivo</strong></p>
            <p>‚Ä¢ Formato: <strong>.dcm, .DCM</strong></p>
        </div>
        """, unsafe_allow_html=True)
        
        uploaded_files = st.file_uploader(
            "üì§ Selecione os arquivos DICOM",
            type=['dcm', 'DCM'],
            accept_multiple_files=True,
            help=f"Selecione at√© {UPLOAD_LIMITS['max_files']} arquivos DICOM (m√°ximo {UPLOAD_LIMITS['max_size_mb']}MB cada)"
        )
        
        if uploaded_files:
            # VERIFICA LIMITES DE SEGURAN√áA
            is_valid, message = check_upload_limits(uploaded_files)
            
            if not is_valid:
                st.error(f"‚ùå {message}")
                log_security_event("UPLOAD_BLOCKED", message)
            else:
                total_size = sum(f.size for f in uploaded_files)
                
                # VALIDA CADA ARQUIVO
                valid_files = []
                for file in uploaded_files:
                    file_copy = BytesIO(file.getvalue())  # Cria c√≥pia para valida√ß√£o
                    if validate_dicom_file(file_copy):
                        valid_files.append(file)
                    else:
                        st.warning(f"‚ö†Ô∏è Arquivo {file.name} n√£o √© um DICOM v√°lido e foi ignorado")
                
                if valid_files:
                    st.success(f"‚úÖ {len(valid_files)} arquivo(s) v√°lido(s) - {get_file_size(total_size)}")
                    
                    # Mostrar tamanho de cada arquivo
                    for file in valid_files:
                        st.markdown(f"""
                        <div class='uploaded-file'>
                            üìÑ {file.name}
                            <div class='file-size'>{get_file_size(file.size)}</div>
                        </div>
                        """, unsafe_allow_html=True)
                else:
                    st.error("‚ùå Nenhum arquivo DICOM v√°lido encontrado")
                    log_security_event("NO_VALID_FILES", "Nenhum arquivo DICOM v√°lido no upload")

    if uploaded_files:
        selected_file = st.selectbox("üìã Selecione o exame para an√°lise:", [f.name for f in uploaded_files])
        dicom_file = next((f for f in uploaded_files if f.name == selected_file), None)
        
        if dicom_file:
            try:
                # VALIDA√á√ÉO FINAL DE SEGURAN√áA
                file_copy = BytesIO(dicom_file.getvalue())
                if not validate_dicom_file(file_copy):
                    st.error("‚ùå Arquivo corrompido ou inv√°lido")
                    log_security_event("FINAL_VALIDATION_FAILED", f"Arquivo {selected_file} falhou na valida√ß√£o final")
                    return
                
                with tempfile.NamedTemporaryFile(delete=False, suffix='.dcm') as tmp_file:
                    tmp_file.write(dicom_file.getvalue())
                    tmp_path = tmp_file.name
                
                dataset = pydicom.dcmread(tmp_path)
                
                # SANITIZA DADOS SENS√çVEIS
                dataset = sanitize_patient_data(dataset)
                
                dicom_data = {
                    'file_name': selected_file,
                    'file_size': get_file_size(dicom_file.size),
                    'patient_name': safe_dicom_value(getattr(dataset, 'PatientName', 'N/A')),
                    'patient_id': safe_dicom_value(getattr(dataset, 'PatientID', 'N/A')),
                    'modality': safe_dicom_value(getattr(dataset, 'Modality', 'N/A')),
                    'study_date': safe_dicom_value(getattr(dataset, 'StudyDate', 'N/A'))
                }
                
                tab1, tab2, tab3, tab4 = st.tabs(["üî¨ Visualiza√ß√£o", "üë§ Identifica√ß√£o", "‚öôÔ∏è T√©cnico", "üìä An√°lise"])
                
                report_data = {}
                image_for_report = None
                
                with tab1:
                    if hasattr(dataset, 'pixel_array'):
                        image = dataset.pixel_array
                        if image.dtype != np.uint8:
                            image = ((image - image.min()) / (image.max() - image.min()) * 255).astype(np.uint8)
                        
                        fig = create_medical_visualization(image, f"Exame: {selected_file}")
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # Salvar imagem para relat√≥rio
                        plt.figure(figsize=(8, 8))
                        plt.imshow(image, cmap='gray')
                        plt.axis('off')
                        plt.title(f"An√°lise DICOM - {selected_file}")
                        img_buffer = BytesIO()
                        plt.savefig(img_buffer, format='png', bbox_inches='tight', pad_inches=0.1)
                        img_buffer.seek(0)
                        image_for_report = Image.open(img_buffer)
                        plt.close()
                    else:
                        st.warning("‚ö†Ô∏è Arquivo DICOM n√£o cont√©m dados de imagem")
                
                with tab2:
                    st.markdown('<div class="card patient-card">', unsafe_allow_html=True)
                    st.subheader("üë§ Dados de Identifica√ß√£o")
                    
                    patient_info = {
                        'Nome': safe_dicom_value(getattr(dataset, 'PatientName', 'N/A')),
                        'ID': safe_dicom_value(getattr(dataset, 'PatientID', 'N/A')),
                        'Idade': safe_dicom_value(getattr(dataset, 'PatientAge', 'N/A')),
                        'Sexo': safe_dicom_value(getattr(dataset, 'PatientSex', 'N/A')),
                        'Data do Estudo': safe_dicom_value(getattr(dataset, 'StudyDate', 'N/A')),
                        'Modalidade': safe_dicom_value(getattr(dataset, 'Modality', 'N/A')),
                        'M√©dico': safe_dicom_value(getattr(dataset, 'ReferringPhysicianName', 'N/A')),
                        'Institui√ß√£o': safe_dicom_value(getattr(dataset, 'InstitutionName', 'N/A'))
                    }
                    
                    cols = st.columns(2)
                    for i, (key, value) in enumerate(patient_info.items()):
                        with cols[i % 2]:
                            st.markdown(f"""
                            <div style='background: #333333; padding: 12px; border-radius: 8px; margin: 8px 0;'>
                                <span class='metric-label'>{key}</span><br>
                                <span class='metric-value'>{value}</span>
                            </div>
                            """, unsafe_allow_html=True)
                    
                    st.markdown('</div>', unsafe_allow_html=True)
                
                with tab3:
                    st.markdown('<div class="card tech-card">', unsafe_allow_html=True)
                    st.subheader("‚öôÔ∏è Informa√ß√µes T√©cnicas")
                    
                    tech_info = {
                        'Modalidade': safe_dicom_value(getattr(dataset, 'Modality', 'N/A')),
                        'Tamanho': f"{safe_dicom_value(getattr(dataset, 'Rows', 'N/A'))} √ó {safe_dicom_value(getattr(dataset, 'Columns', 'N/A'))}",
                        'Bits por Pixel': safe_dicom_value(getattr(dataset, 'BitsAllocated', 'N/A')),
                        'Janela Central': safe_dicom_value(getattr(dataset, 'WindowCenter', 'N/A')),
                        'Largura da Janela': safe_dicom_value(getattr(dataset, 'WindowWidth', 'N/A')),
                        'Espessura de Corte': safe_dicom_value(getattr(dataset, 'SliceThickness', 'N/A'))
                    }
                    
                    cols = st.columns(2)
                    for i, (key, value) in enumerate(tech_info.items()):
                        with cols[i % 2]:
                            st.markdown(f"""
                            <div style='background: #333333; padding: 12px; border-radius: 8px; margin: 8px 0;'>
                                <span class='metric-label'>{key}</span><br>
                                <span class='metric-value'>{value}</span>
                            </div>
                            """, unsafe_allow_html=True)
                    
                    st.markdown('</div>', unsafe_allow_html=True)
                
                with tab4:
                    if hasattr(dataset, 'pixel_array'):
                        report_data = {
                            'dimensoes': f"{image.shape[0]} √ó {image.shape[1]}",
                            'min_intensity': int(np.min(image)),
                            'max_intensity': int(np.max(image)),
                            'media': f"{np.mean(image):.2f}",
                            'desvio_padrao': f"{np.std(image):.2f}",
                            'total_pixels': f"{image.size:,}"
                        }
                        
                        # Bot√µes de relat√≥rio
col1, col2 = st.columns(2)
with col1:
    if st.button("üìß Enviar Relat√≥rio por Email", help="Envia relat√≥rio completo para wenndell.luz@gmail.com"):
        if send_email_report(st.session_state.user_data, dicom_data, image_for_report, report_data):
            st.success("‚úÖ Relat√≥rio enviado para wenndell.luz@gmail.com")
            st.info("üìã Uma c√≥pia foi enviada para o administrador do sistema para auditoria e melhoria cont√≠nua")
            log_security_event("USER_NOTIFIED", "Usu√°rio informado sobre envio de c√≥pia")

with col2:
    pdf_report = create_pdf_report(st.session_state.user_data, dicom_data, report_data)
    st.download_button(
        label="üìÑ Baixar Relat√≥rio PDF",
        data=pdf_report,
        file_name=f"relatorio_{selected_file.split('.')[0]}.pdf",
        mime="application/pdf",
        help="Baixe relat√≥rio completo em PDF"
    )
                        
                        # Se√ß√£o de feedback
                        show_feedback_section({
                            'dicom_data': dicom_data,
                            'report_data': report_data,
                            'user': st.session_state.user_data,
                            'timestamp': datetime.now().isoformat()
                        })
                
                # Limpar arquivo tempor√°rio
                os.unlink(tmp_path)
                
            except Exception as e:
                error_msg = f"Erro ao processar arquivo: {str(e)}"
                st.error(f"‚ùå {error_msg}")
                log_security_event("PROCESSING_ERROR", error_msg)
    else:
        show_dashboard()

def main():
    """Fun√ß√£o principal"""
    try:
        log_security_event("APP_START", "Aplicativo iniciado")
        
        if 'authenticated' not in st.session_state:
            st.session_state.authenticated = False
            st.session_state.user_data = {}
            st.session_state.feedback_submitted = False
        
        if not st.session_state.authenticated:
            show_login_page()
        else:
            show_main_app()
            
    except Exception as e:
        error_msg = f"Erro cr√≠tico: {str(e)}"
        log_security_event("APP_CRASH", error_msg)
        st.error("‚ùå Erro cr√≠tico no aplicativo. Os administradores foram notificados.")

# Inicializar banco e executar aplica√ß√£o
init_database()

if __name__ == "__main__":
    main()
