import streamlit as st
import pydicom
import numpy as np
import matplotlib.pyplot as plt
import os
import tempfile
import warnings
import smtplib
import socket
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage
from email.mime.application import MIMEApplication
import pandas as pd
from datetime import datetime
from io import BytesIO
import plotly.graph_objects as go
import plotly.express as px
import json
import sqlite3
from PIL import Image
import logging
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

# Configurar logging de seguran√ßa
logging.basicConfig(
    filename='security.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# Suprimir warnings
warnings.filterwarnings("ignore", message=".*missing ScriptRunContext.*")
warnings.filterwarnings("ignore", category=UserWarning)

# Configura√ß√µes de email (usando vari√°veis de ambiente)
EMAIL_CONFIG = {
    'sender': os.environ.get('EMAIL_SENDER', ''),
    'password': os.environ.get('EMAIL_PASSWORD', ''),
    'smtp_server': os.environ.get('SMTP_SERVER', 'smtp.gmail.com'),
    'smtp_port': int(os.environ.get('SMTP_PORT', 587))
}

# Limite de rate limiting
UPLOAD_LIMITS = {
    'max_files': 10,
    'max_size_mb': 2000,
    'max_uploads_per_hour': 5
}

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="DICOM Autopsy Viewer",
    page_icon="üî¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado - Tema aut√≥psia virtual
st.markdown("""
<style>
    .main { background: #1a1a1a; }
    .stApp { background: #0d0d0d; color: #ffffff; }
    .main-header { font-size: 2.5rem; color: #ffffff !important; text-align: center; font-weight: 700; }
    .sub-header { font-size: 1.5rem; color: #ffffff !important; font-weight: 600; }
    p, div, span, label { color: #e0e0e0 !important; }
    .card { background: #2d2d2d; padding: 20px; border-radius: 12px; margin-bottom: 20px; border-left: 4px solid #00bcd4; }
    .patient-card { border-left: 4px solid #ff5252; }
    .tech-card { border-left: 4px solid #4caf50; }
    .image-card { border-left: 4px solid #9c27b0; }
    .stats-card { border-left: 4px solid #ff9800; }
    .login-card { border-left: 4px solid #00bcd4; background: #2d2d2d; padding: 30px; border-radius: 15px; }
    .feedback-card { border-left: 4px solid #ff9800; background: #2d2d2d; padding: 20px; border-radius: 12px; }
    .stButton>button { background: linear-gradient(45deg, #00bcd4, #00838f); color: white !important; border-radius: 8px; padding: 12px 24px; }
    .uploaded-file { background: #333333; padding: 12px; border-radius: 8px; margin: 8px 0; border-left: 3px solid #00bcd4; }
    .metric-value { font-size: 1.3rem; font-weight: 700; color: #00bcd4 !important; }
    .metric-label { font-size: 0.9rem; color: #b0b0b0 !important; font-weight: 500; }
    .file-size { color: #00bcd4; font-size: 0.8rem; margin-top: 5px; }
    .upload-info { background: #2d2d2d; padding: 15px; border-radius: 10px; margin: 10px 0; border-left: 4px solid #4caf50; }
    .star-rating { font-size: 2rem; color: #ffd700; margin: 10px 0; }
    .security-alert { background: #ffebee; color: #c62828; padding: 10px; border-radius: 5px; border-left: 4px solid #c62828; }
</style>
""", unsafe_allow_html=True)

# Configura√ß√£o do banco de dados para feedback
DB_PATH = "feedback_database.db"

def check_dependencies():
    """Verifica se todas as depend√™ncias est√£o dispon√≠veis"""
    dependencies = {
        'streamlit': True,
        'pydicom': True,
        'numpy': True,
        'matplotlib': True,
        'PIL': True,
        'plotly': True,
        'smtplib': True,
        'sqlite3': True,
    }
    
    missing = []
    for dep, required in dependencies.items():
        try:
            if required:
                __import__(dep)
        except ImportError:
            missing.append(dep)
    
    return missing

def init_database():
    """Inicializa o banco de dados para feedback"""
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS feedback
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      user_email TEXT,
                      feedback_text TEXT,
                      rating INTEGER,
                      report_data TEXT,
                      timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
        c.execute('''CREATE TABLE IF NOT EXISTS system_learning
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      error_type TEXT,
                      error_message TEXT,
                      solution_applied TEXT,
                      occurrence_count INTEGER DEFAULT 1,
                      last_occurrence DATETIME DEFAULT CURRENT_TIMESTAMP)''')
        c.execute('''CREATE TABLE IF NOT EXISTS security_logs
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      event_type TEXT,
                      user_ip TEXT,
                      user_agent TEXT,
                      details TEXT,
                      timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
        c.execute('''CREATE TABLE IF NOT EXISTS access_logs
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      timestamp DATETIME,
                      user TEXT,
                      action TEXT,
                      resource TEXT,
                      details TEXT)''')
        conn.commit()
        conn.close()
    except Exception as e:
        log_security_event("DATABASE_ERROR", f"Erro ao inicializar banco: {e}")

def log_security_event(event_type, details):
    """Registra eventos de seguran√ßa"""
    try:
        user_ip = "unknown"
        user_agent = "unknown"
        
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute('''INSERT INTO security_logs (event_type, user_ip, user_agent, details)
                     VALUES (?, ?, ?, ?)''', 
                 (event_type, user_ip, user_agent, details))
        conn.commit()
        conn.close()
        
        logging.info(f"SECURITY - {event_type}: {details}")
    except Exception as e:
        logging.error(f"Erro ao registrar evento de seguran√ßa: {e}")

def log_access(user, action, resource, details=""):
    """Registra acesso a recursos sens√≠veis"""
    timestamp = datetime.now().isoformat()
    user_ip = "unknown"
    user_agent = "unknown"
    
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute('''INSERT INTO access_logs (timestamp, user, action, resource, details)
                     VALUES (?, ?, ?, ?, ?)''', 
                 (timestamp, user, action, resource, details))
        conn.commit()
        conn.close()
    except Exception as e:
        logging.error(f"Erro ao registrar acesso: {e}")

def validate_dicom_file(file):
    """Valida√ß√£o mais robusta de arquivos DICOM"""
    try:
        # Verifica se o arquivo √© muito grande (preven√ß√£o contra DoS)
        max_size = 500 * 1024 * 1024  # 500MB
        file_size = len(file.getvalue())
        if file_size > max_size:
            log_security_event("FILE_TOO_LARGE", f"Arquivo excede limite de {max_size} bytes")
            return False
        
        # Salva a posi√ß√£o original
        original_position = file.tell()
        
        # Verifica assinatura DICOM (128 bytes + 'DICM')
        file.seek(128)
        signature = file.read(4)
        file.seek(original_position)
        
        if signature != b'DICM':
            log_security_event("INVALID_FILE", "Arquivo n√£o √© DICOM v√°lido")
            return False
            
        # Verifica√ß√£o adicional: tenta ler o metadata DICOM
        try:
            with tempfile.NamedTemporaryFile(delete=False, suffix='.dcm') as tmp_file:
                tmp_file.write(file.getvalue())
                tmp_path = tmp_file.name
            
            # Tenta ler o arquivo DICOM
            dataset = pydicom.dcmread(tmp_path, force=True)
            
            # Verifica se tem pelo menos alguns atributos obrigat√≥rios
            if not hasattr(dataset, 'SOPClassUID') or not hasattr(dataset, 'SOPInstanceUID'):
                log_security_event("INVALID_DICOM", "Arquivo n√£o cont√©m metadados DICOM essenciais")
                os.unlink(tmp_path)
                return False
                
            os.unlink(tmp_path)
            return True
            
        except Exception as e:
            log_security_event("DICOM_READ_ERROR", f"Erro ao ler metadados DICOM: {e}")
            if 'tmp_path' in locals() and os.path.exists(tmp_path):
                os.unlink(tmp_path)
            return False
            
    except Exception as e:
        log_security_event("FILE_VALIDATION_ERROR", f"Erro na valida√ß√£o: {e}")
        return False

def sanitize_patient_data(dataset):
    """Remove todos os dados sens√≠veis de acordo com DICOM Standard"""
    try:
        # Lista completa de tags sens√≠veis baseada no DICOM Standard
        sensitive_tags = [
            'PatientName', 'PatientID', 'PatientBirthDate', 'PatientSex',
            'PatientAge', 'PatientSize', 'PatientWeight', 'PatientAddress',
            'ReferringPhysicianName', 'ReferringPhysicianAddress',
            'ReferringPhysicianTelephoneNumbers', 'InstitutionName',
            'InstitutionAddress', 'StudyDate', 'StudyTime', 'AccessionNumber',
            'StudyID', 'SeriesDate', 'ContentDate', 'AcquisitionDateTime',
            'InstitutionDepartmentName', 'StationName', 'PerformingPhysicianName'
        ]
        
        for tag in sensitive_tags:
            if hasattr(dataset, tag):
                original_value = getattr(dataset, tag)
                setattr(dataset, tag, "REDACTED")
                log_security_event("DATA_SANITIZED", f"Campo {tag} redacted: {original_value}")
        
        return dataset
    except Exception as e:
        log_security_event("SANITIZATION_ERROR", f"Erro ao sanitizar dados: {e}")
        return dataset

def check_upload_limits(uploaded_files):
    """Verifica limites de upload"""
    try:
        total_size = sum(f.size for f in uploaded_files)
        
        if len(uploaded_files) > UPLOAD_LIMITS['max_files']:
            log_security_event("UPLOAD_LIMIT_EXCEEDED", f"M√°ximo de {UPLOAD_LIMITS['max_files']} arquivos excedido")
            return False, f"M√°ximo de {UPLOAD_LIMITS['max_files']} arquivos permitido"
            
        if total_size > UPLOAD_LIMITS['max_size_mb'] * 1024 * 1024:
            log_security_event("SIZE_LIMIT_EXCEEDED", f"M√°ximo de {UPLOAD_LIMITS['max_size_mb']}MB excedido")
            return False, f"M√°ximo de {UPLOAD_LIMITS['max_size_mb']}MB permitido"
            
        return True, "OK"
    except Exception as e:
        log_security_event("UPLOAD_LIMIT_ERROR", f"Erro ao verificar limites: {e}")
        return False, "Erro ao verificar limites"

def get_file_size(bytes_size):
    """Converte bytes para formato leg√≠vel"""
    for unit in ['B', 'KB', 'MB', 'GB']:
        if bytes_size < 1024.0:
            return f"{bytes_size:.1f} {unit}"
        bytes_size /= 1024.0
    return f"{bytes_size:.1f} TB"

def save_feedback(user_email, feedback_text, rating, report_data):
    """Salva feedback no banco de dados"""
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute('''INSERT INTO feedback (user_email, feedback_text, rating, report_data)
                     VALUES (?, ?, ?, ?)''', 
                 (user_email, feedback_text, rating, json.dumps(report_data)))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        log_security_event("FEEDBACK_ERROR", f"Erro ao salvar feedback: {e}")
        return False

def send_email_report(user_data, dicom_data, image_data, report_data):
    """Envia relat√≥rio por email com melhor tratamento de erros"""
    try:
        # Verifica se as credenciais de email est√£o configuradas
        if not EMAIL_CONFIG['sender'] or not EMAIL_CONFIG['password']:
            error_msg = "Credenciais de email n√£o configuradas"
            log_security_event("EMAIL_CONFIG_ERROR", error_msg)
            st.error("Configura√ß√£o de email n√£o est√° completa. Contate o administrador.")
            return False
        
        msg = MIMEMultipart()
        msg['From'] = EMAIL_CONFIG['sender']
        msg['To'] = 'wenndell.luz@gmail.com'
        msg['Subject'] = f'Relat√≥rio de An√°lise DICOM - {datetime.now().strftime("%d/%m/%Y %H:%M")}'
        
        # Corpo do email
        body = f"""
        RELAT√ìRIO DE AN√ÅLISE DICOM - DICOM AUTOPSY VIEWER
        =================================================
        
        DADOS DO USU√ÅRIO:
        - Nome: {user_data['nome']}
        - Departamento: {user_data['departamento']}
        - Email: {user_data['email']}
        - Contato: {user_data['contato']}
        - Data da An√°lise: {datetime.now().strftime("%d/%m/%Y %H:%M")}
        
        DADOS DO EXAME:
        - Arquivo: {dicom_data.get('file_name', 'N/A')}
        - Tamanho: {dicom_data.get('file_size', 'N/A')}
        - Paciente: {dicom_data.get('patient_name', 'N/A')}
        - ID: {dicom_data.get('patient_id', 'N/A')}
        - Modalidade: {dicom_data.get('modality', 'N/A')}
        - Data do Exame: {dicom_data.get('study_date', 'N/A')}
        
        ESTAT√çSTICAS DA IMAGEM:
        - Dimens√µes: {report_data.get('dimensoes', 'N/A')}
        - Intensidade M√≠nima: {report_data.get('min_intensity', 'N/A')}
        - Intensidade M√°xima: {report_data.get('max_intensity', 'N/A')}
        - M√©dia: {report_data.get('media', 'N/A')}
        - Desvio Padr√£o: {report_data.get('desvio_padrao', 'N/A')}
        - Total de Pixels: {report_data.get('total_pixels', 'N/A')}
        """
        
        msg.attach(MIMEText(body, 'plain'))
        
        # Anexar imagem
        if image_data:
            img_byte_arr = BytesIO()
            image_data.save(img_byte_arr, format='PNG')
            img_byte_arr = img_byte_arr.getvalue()
            image_attachment = MIMEImage(img_byte_arr, name='analise_dicom.png')
            msg.attach(image_attachment)
        
        # Anexar relat√≥rio em CSV
        report_df = pd.DataFrame([{
            'Usuario': user_data['nome'],
            'Departamento': user_data['departamento'],
            'Email': user_data['email'],
            'Contato': user_data['contato'],
            'Data_Analise': datetime.now().strftime("%d/%m/%Y %H:%M"),
            'Arquivo': dicom_data.get('file_name', 'N/A'),
            'Tamanho_Arquivo': dicom_data.get('file_size', 'N/A'),
            'Paciente': dicom_data.get('patient_name', 'N/A'),
            'ID_Paciente': dicom_data.get('patient_id', 'N/A'),
            'Modalidade': dicom_data.get('modality', 'N/A'),
            'Data_Exame': dicom_data.get('study_date', 'N/A'),
            'Dimensoes': report_data.get('dimensoes', 'N/A'),
            'Intensidade_Min': report_data.get('min_intensity', 'N/A'),
            'Intensidade_Max': report_data.get('max_intensity', 'N/A'),
            'Media_Intensidade': report_data.get('media', 'N/A'),
            'Desvio_Padrao': report_data.get('desvio_padrao', 'N/A')
        }])
        
        csv_buffer = BytesIO()
        report_df.to_csv(csv_buffer, index=False)
        csv_attachment = MIMEApplication(csv_buffer.getvalue(), name='relatorio_analise.csv')
        csv_attachment['Content-Disposition'] = 'attachment; filename="relatorio_analise.csv"'
        msg.attach(csv_attachment)
        
        # Enviar email com timeout e tratamento de erros espec√≠fico
        try:
            server = smtplib.SMTP(EMAIL_CONFIG['smtp_server'], EMAIL_CONFIG['smtp_port'], timeout=30)
            server.starttls()
            server.login(EMAIL_CONFIG['sender'], EMAIL_CONFIG['password'])
            server.send_message(msg)
            server.quit()
            
            log_security_event("EMAIL_SENT", "Relat√≥rio enviado com sucesso")
            return True
            
        except smtplib.SMTPAuthenticationError:
            error_msg = "Falha na autentica√ß√£o do email. Verifique as credenciais."
            log_security_event("EMAIL_AUTH_ERROR", error_msg)
            st.error("Erro de autentica√ß√£o no servidor de email.")
            return False
            
        except smtplib.SMTPException as e:
            error_msg = f"Erro SMTP: {str(e)}"
            log_security_event("EMAIL_SMTP_ERROR", error_msg)
            st.error("Erro ao comunicar com o servidor de email.")
            return False
            
        except socket.timeout:
            error_msg = "Timeout ao conectar com o servidor de email"
            log_security_event("EMAIL_TIMEOUT", error_msg)
            st.error("Timeout ao conectar com o servidor de email. Tente novamente.")
            return False
            
    except Exception as e:
        error_msg = f"Erro geral ao enviar email: {str(e)}"
        log_security_event("EMAIL_ERROR", error_msg)
        st.error("Erro inesperado ao enviar email.")
        return False

def safe_dicom_value(value, default="N/A"):
    """Fun√ß√£o segura para obter valores DICOM"""
    try:
        if value is None: return default
        if hasattr(value, '__len__') and len(value) > 100:
            return f"Dados muito grandes ({len(value)} bytes)"
        if hasattr(value, 'original_string'): return str(value.original_string)
        return str(value)
    except Exception as e:
        log_security_event("DICOM_VALUE_ERROR", f"Erro ao obter valor DICOM: {e}")
        return default

def create_medical_visualization(image, title):
    """Cria visualiza√ß√£o m√©dica profissional"""
    fig = go.Figure()
    fig.add_trace(go.Heatmap(z=image, colorscale='gray', showscale=False, hoverinfo='none'))
    fig.update_layout(
        title={'text': title, 'y':0.95, 'x':0.5, 'xanchor': 'center', 'yanchor': 'top', 'font': {'size': 16, 'color': '#ffffff'}},
        width=600, height=500, margin=dict(l=20, r=20, t=60, b=20),
        plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='#1a1a1a',
        xaxis=dict(visible=False, gridcolor='#333333'), yaxis=dict(visible=False, gridcolor='#333333')
    )
    return fig

def create_advanced_histogram(image):
    """Cria histograma avan√ßado"""
    fig = px.histogram(x=image.flatten(), nbins=100, title="Distribui√ß√£o de Intensidade de Pixels",
                      labels={'x': 'Intensidade', 'y': 'Frequ√™ncia'}, color_discrete_sequence=['#00bcd4'])
    fig.update_layout(plot_bgcolor='#1a1a1a', paper_bgcolor='#1a1a1a', font=dict(color='#ffffff'), bargap=0.1)
    return fig

def create_pdf_report(user_data, dicom_data, report_data):
    """Cria relat√≥rio em PDF"""
    from reportlab.lib.pagesizes import A4
    from reportlab.pdfgen import canvas
    from io import BytesIO
    
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=A4)
    
    # Cabe√ßalho
    c.setFont("Helvetica-Bold", 16)
    c.drawString(50, 800, "RELAT√ìRIO DE AN√ÅLISE DICOM")
    c.setFont("Helvetica", 10)
    c.drawString(50, 780, f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    
    # Dados do usu√°rio
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, 750, "DADOS DO ANALISTA:")
    c.setFont("Helvetica", 10)
    c.drawString(50, 730, f"Nome: {user_data['nome']}")
    c.drawString(50, 715, f"Departamento: {user_data['departamento']}")
    c.drawString(50, 700, f"Email: {user_data['email']}")
    c.drawString(50, 685, f"Contato: {user_data['contato']}")
    
    # Dados do exame
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, 650, "DADOS DO EXAME:")
    c.setFont("Helvetica", 10)
    c.drawString(50, 630, f"Arquivo: {dicom_data.get('file_name', 'N/A')}")
    c.drawString(50, 615, f"Tamanho: {dicom_data.get('file_size', 'N/A')}")
    c.drawString(50, 600, f"Paciente: {dicom_data.get('patient_name', 'N/A')}")
    c.drawString(50, 585, f"ID: {dicom_data.get('patient_id', 'N/A')}")
    c.drawString(50, 570, f"Modalidade: {dicom_data.get('modality', 'N/A')}")
    
    # Estat√≠sticas
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, 540, "ESTAT√çSTICAS:")
    c.setFont("Helvetica", 10)
    c.drawString(50, 520, f"Dimens√µes: {report_data.get('dimensoes', 'N/A')}")
    c.drawString(50, 505, f"Intensidade M√≠nima: {report_data.get('min_intensity', 'N/A')}")
    c.drawString(50, 490, f"Intensidade M√°xima: {report_data.get('max_intensity', 'N/A')}")
    c.drawString(50, 475, f"M√©dia: {report_data.get('media', 'N/A')}")
    c.drawString(50, 460, f"Desvio Padr√£o: {report_data.get('desvio_padrao', 'N/A')}")
    c.drawString(50, 445, f"Total de Pixels: {report_data.get('total_pixels', 'N/A')}")
    
    c.save()
    buffer.seek(0)
    return buffer

def check_data_protection_compliance():
    """Verifica conformidade com regulamenta√ß√µes de prote√ß√£o de dados"""
    compliance = {
        'data_minimization': True,
        'purpose_limitation': True,
        'storage_limitation': True,
        'integrity_and_confidentiality': True,
        'accountability': True
    }
    return compliance

def get_compliance_badge():
    """Retorna um badge de conformidade"""
    compliance = check_data_protection_compliance()
    if all(compliance.values()):
        return "üõ°Ô∏è Conformidade com LGPD/GDPR"
    else:
        return "‚ö†Ô∏è Verifica√ß√£o de conformidade necess√°ria"

def show_feedback_section(report_data):
    """Se√ß√£o de feedback"""
    st.markdown("---")
    st.markdown('<div class="feedback-card">', unsafe_allow_html=True)
    st.subheader("üí¨ Feedback do Relat√≥rio")
    
    if not st.session_state.get('feedback_submitted', False):
        with st.form("feedback_form"):
            st.markdown('<div class="star-rating">‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê</div>', unsafe_allow_html=True)
            
            rating = st.slider("Avalia√ß√£o (1-5 estrelas)", 1, 5, 5)
            feedback_text = st.text_area("Coment√°rios ou sugest√µes:", placeholder="O que achou do relat√≥rio? Como podemos melhorar?")
            
            submitted = st.form_submit_button("üì§ Enviar Feedback")
            
            if submitted:
                if save_feedback(st.session_state.user_data['email'], feedback_text, rating, report_data):
                    st.session_state.feedback_submitted = True
                    st.success("‚úÖ Feedback enviado com sucesso! Obrigado por contribuir com a melhoria do sistema.")
                else:
                    st.error("‚ùå Erro ao enviar feedback.")
    else:
        st.success("üìù Obrigado pelo seu feedback! Sua contribui√ß√£o ajuda a melhorar o sistema.")
    
    st.markdown('</div>', unsafe_allow_html=True)

    
    st.markdown('</div>', unsafe_allow_html=True)   
def show_ra_index_section():
    """Se√ß√£o do RA-Index com refer√™ncias bibliogr√°ficas"""
    st.markdown("---")
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.subheader("üî¨ √çndice de Altera√ß√£o Radiol√≥gica (RA-Index)")
    
    with st.expander("üìö Refer√™ncias Bibliogr√°ficas e Metodologia"):
        st.markdown("""
        ### Desenvolvimento e valida√ß√£o de um √≠ndice de altera√ß√£o radiol√≥gica post-mortem: o RA-Index
        
        **Revista Brasileira de Direito (2012) 126:559‚Äì566**  
        DOI: 10.1007/s00414-012-0686-6
        
        **Autores:**  
        C. Egger, P. Vaucher, F. Doenz, C. Palmiere, P. Mangin, S. Grabherr
        
        **Recebido:** 11 de outubro de 2011  
        **Aceito:** 21 de fevereiro de 2012  
        **Publicado online:** 9 de mar√ßo de 2012
        
        ### Resumo
        Este estudo teve como objetivo derivar um √≠ndice quantificando o estado de altera√ß√£o de cad√°veres 
        quantificando a presen√ßa de g√°s no corpo usando imagens de tomografia computadorizada multidetectora 
        post-mortem (MDCT) e validar o √≠ndice definindo sua sensibilidade e especificidade.
        """)
        
        st.markdown("""
        ### M√©todo RA-Index
        O √≠ndice RA foi derivado de dados de MDCT post-mortem de 118 pessoas falecidas n√£o traum√°ticas. 
        Para validar o √≠ndice, 100 corpos escaneados adicionais (50% falecidos traumaticamente) foram 
        examinados retrospectivamente por dois observadores independentes.
        """)
        
        # Tabela do RA-Index
        st.markdown("""
        ### Pontua√ß√µes do RA-Index
        | Local Anat√¥mico | Grau 0 | Grau I | Grau II | Grau III | Coeficiente Kappa |
        |-----------------|--------|--------|---------|----------|-------------------|
        | Cavidades Card√≠acas | 0 | 5 | 15 | 20 | 0.41 |
        | Par√™nquima Hep√°tico e Vasos | 0 | 8 | 17 | 25 | 0.66 |
        | Veia Inominada Esquerda | 0 | 8 | 8 | 8 | 0.78 |
        | Aorta Abdominal | 0 | 8 | 8 | 8 | 0.49 |
        | Par√™nquima Renal | 0 | 7 | 7 | 7 | 0.56 |
        | V√©rtebra L3 | 0 | 5 | 10 | 25 | 0.43 |
        | Tecidos Subcut√¢neos Peitorais | 0 | 8 | 8 | 8 | 0.46 |
        """)
        
        st.markdown("""
        ### Interpreta√ß√£o do RA-Index
        - **RA-Index < 50**: Altera√ß√£o m√≠nima/moderada
        - **RA-Index ‚â• 50**: Suspeita de g√°s grau III em cavidades card√≠acas
        - **RA-Index ‚â• 60**: Suspeita de g√°s grau II ou III na cavidade craniana
        
        ### Valida√ß√£o
        - **Sensibilidade**: 100% (IC 95%: 51,7-100) para detectar cavidades card√≠acas cheias de g√°s
        - **Especificidade**: 98,8% (IC 95%: 92,6-99,9)
        - **Confiabilidade**: ICC‚ÇÇ,‚ÇÅ = 0,95 (IC 95%: 0,92-0,96)
        """)
        
        st.markdown("""
        ### Aplica√ß√µes Pr√°ticas
        1. **Triagem de embolia gasosa**: Valores abaixo de 50 indicam necessidade de investiga√ß√£o adicional
        2. **Controle de qualidade**: Excluir casos com altera√ß√£o avan√ßada (>60) de estudos de imagem
        3. **Interpreta√ß√£o radiol√≥gica**: Considerar o estado de altera√ß√£o no diagn√≥stico por imagem
        """)
    
    # Calculadora do RA-Index (se o usu√°rio quiser calcular)
    st.markdown("### üìä Calculadora do RA-Index")
    st.info("Use esta calculadora para determinar o RA-Index com base nos achados de imagem")
    
    col1, col2 = st.columns(2)
    
    with col1:
        cardiac = st.selectbox("Cavidades Card√≠acas", ["Grau 0", "Grau I", "Grau II", "Grau III"], help="Presen√ßa de g√°s nas 4 cavidades do cora√ß√£o")
        hepatic = st.selectbox("Par√™nquima Hep√°tico", ["Grau 0", "Grau I", "Grau II", "Grau III"], help="Presen√ßa de g√°s no f√≠gado e vasos hep√°ticos")
        vein = st.selectbox("Veia Inominada Esquerda", ["Grau 0", "Grau I", "Grau II", "Grau III"], help="Presen√ßa de g√°s na veia inominada esquerda")
        aorta = st.selectbox("Aorta Abdominal", ["Grau 0", "Grau I", "Grau II", "Grau III"], help="Presen√ßa de g√°s na aorta abdominal")
    
    with col2:
        renal = st.selectbox("Par√™nquima Renal", ["Grau 0", "Grau I", "Grau II", "Grau III"], help="Presen√ßa de g√°s nos rins")
        vertebra = st.selectbox("V√©rtebra L3", ["Grau 0", "Grau I", "Grau II", "Grau III"], help="Presen√ßa de g√°s na terceira v√©rtebra lombar")
        subcutaneous = st.selectbox("Tecidos Subcut√¢neos", ["Grau 0", "Grau I", "Grau II", "Grau III"], help="Presen√ßa de g√°s nos tecidos subcut√¢neos peitorais")
    
    if st.button("Calcular RA-Index"):
        # Mapeamento de valores
        scores = {
            "Grau 0": 0,
            "Grau I": 1,
            "Grau II": 2,
            "Grau III": 3
        }
        
        # Pontua√ß√µes conforme a tabela do estudo
        ra_scores = {
            "cardiac": [0, 5, 15, 20],
            "hepatic": [0, 8, 17, 25],
            "vein": [0, 8, 8, 8],
            "aorta": [0, 8, 8, 8],
            "renal": [0, 7, 7, 7],
            "vertebra": [0, 5, 10, 25],
            "subcutaneous": [0, 8, 8, 8]
        }
        
        # Calcular RA-Index
        total_score = (
            ra_scores["cardiac"][scores[cardiac]] +
            ra_scores["hepatic"][scores[hepatic]] +
            ra_scores["vein"][scores[vein]] +
            ra_scores["aorta"][scores[aorta]] +
            ra_scores["renal"][scores[renal]] +
            ra_scores["vertebra"][scores[vertebra]] +
            ra_scores["subcutaneous"][scores[subcutaneous]]
        )
        
        # Interpreta√ß√£o
        if total_score < 50:
            interpretation = "Altera√ß√£o m√≠nima/moderada"
            color = "green"
        elif total_score < 60:
            interpretation = "Suspeita de g√°s grau III em cavidades card√≠acas"
            color = "orange"
        else:
            interpretation = "Suspeita de g√°s grau II ou III na cavidade craniana - Altera√ß√£o avan√ßada"
            color = "red"
        
        # Mostrar resultado
        st.markdown(f"""
        <div style='background: #2d2d2d; padding: 20px; border-radius: 10px; border-left: 4px solid {color};'>
            <h3 style='color: {color}; margin-top: 0;'>RA-Index: {total_score}/100</h3>
            <p style='color: #e0e0e0;'>{interpretation}</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Recomenda√ß√µes
        if total_score >= 50:
            st.warning("""
            **Recomenda√ß√µes:**
            - Considerar an√°lise de composi√ß√£o gasosa (cromatografia gasosa)
            - Interpretar achados radiol√≥gicos com cautela
            - Limitar procedimentos diagn√≥sticos adicionais
            """)
    
    st.markdown('</div>', unsafe_allow_html=True)
def show_login_page():
    """P√°gina de login/registro"""
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.markdown('<h1 class="main-header">üî¨ DICOM Autopsy Viewer</h1>', unsafe_allow_html=True)
        st.markdown('<p style="text-align: center; color: #b0b0b0 !important; font-size: 1.1rem;">Sistema Profissional para An√°lise Forense</p>', unsafe_allow_html=True)
        
        with st.container():
            st.markdown('<div class="login-card">', unsafe_allow_html=True)
            st.subheader("üìã Acesso ao Sistema")
            
            with st.form("login_form"):
                nome = st.text_input("Nome Completo", placeholder="Digite seu nome completo")
                departamento = st.text_input("Departamento", placeholder="Departamento/Filia√ß√£o")
                email = st.text_input("Email", placeholder="seu.email@exemplo.com")
                contato = st.text_input("Contato", placeholder="Telefone ou outro contato")
                
                submitted = st.form_submit_button("üîì Acessar Sistema")
                
                if submitted:
                    if nome and departamento and email and contato:
                        st.session_state.authenticated = True
                        st.session_state.user_data = {
                            'nome': nome,
                            'departamento': departamento,
                            'email': email,
                            'contato': contato,
                            'data_acesso': datetime.now().strftime("%d/%m/%Y %H:%M")
                        }
                        log_access(nome, "LOGIN", "SYSTEM_ACCESS")
                        st.success("‚úÖ Acesso concedido! Carregando sistema...")
                        st.rerun()
                    else:
                        st.error("‚ùå Preencha todos os campos obrigat√≥rios")
            
            st.markdown('</div>', unsafe_allow_html=True)

def show_dashboard():
    """Dashboard inicial"""
    compliance_badge = get_compliance_badge()
    
    st.markdown(f"""
    <div style='text-align: center; padding: 40px 20px; background: #2d2d2d; border-radius: 15px; color: #ffffff;'>
        <h2 style='color: #00bcd4 !important;'>üî¨ Bem-vindo ao DICOM Autopsy Viewer</h2>
        <p style='color: #b0b0b0 !important;'>Sistema profissional para an√°lise forense de imagens DICOM</p>
        <div style='font-size: 3rem; margin: 20px 0;'>üî¨üìäüìß</div>
        <div style='background: #4caf50; padding: 10px; border-radius: 5px; display: inline-block; margin-top: 15px;'>
            {compliance_badge}
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown("""
        <div class='card'>
            <h4>üíæ Grande Capacidade</h4>
            <p>‚Ä¢ 200MB por arquivo</p>
            <p>‚Ä¢ At√© 10 arquivos por caso</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class='card'>
            <h4>üìä An√°lise Completa</h4>
            <p>‚Ä¢ Visualiza√ß√£o avan√ßada</p>
            <p>‚Ä¢ Estat√≠sticas detalhadas</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class='card'>
            <h4>üìß Integra√ß√£o Total</h4>
            <p>‚Ä¢ Envio autom√°tico por email</p>
            <p>‚Ä¢ Relat√≥rios em PDF</p>
        </div>
        """, unsafe_allow_html=True)

def show_main_app():
    """Aplicativo principal ap√≥s autentica√ß√£o"""
    # Registrar acesso
    log_access(st.session_state.user_data['nome'], "LOGIN", "MAIN_APP")
    
    col1, col2, col3 = st.columns([2, 1, 1])
    with col1:
        st.markdown('<h1 class="main-header">üî¨ DICOM Autopsy Viewer</h1>', unsafe_allow_html=True)
    with col3:
        st.markdown(f'<div style="background: #333; padding: 10px; border-radius: 8px; text-align: center;">'
                   f'<span style="color: #00bcd4;">üë§ {st.session_state.user_data["nome"]}</span><br>'
                   f'<span style="color: #b0b0b0; font-size: 0.8rem;">{st.session_state.user_data["departamento"]}</span>'
                   f'</div>', unsafe_allow_html=True)
        
        if st.button("üö™ Sair"):
            log_access(st.session_state.user_data['nome'], "LOGOUT", "SYSTEM_ACCESS")
            st.session_state.authenticated = False
            st.session_state.user_data = {}
            st.rerun()

    st.markdown("---")

    with st.sidebar:
        st.markdown(f"""
        <div style='background: linear-gradient(135deg, #1a237e, #283593); padding: 15px; border-radius: 10px; color: white; text-align: center;'>
            <h3 style='margin: 0;'>üë§ Usu√°rio Logado</h3>
            <p style='margin: 5px 0; font-size: 0.9rem;'>{st.session_state.user_data['nome']}</p>
            <p style='margin: 0; font-size: 0.8rem;'>{st.session_state.user_data['departamento']}</p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("---")
        
        st.markdown(f"""
        <div class='upload-info'>
            <h4>üìÅ Upload de Exames</h4>
            <p>‚Ä¢ Limite: <strong>{UPLOAD_LIMITS['max_files']} arquivos</strong></p>
            <p>‚Ä¢ Tamanho: <strong>{UPLOAD_LIMITS['max_size_mb']}MB por arquivo</strong></p>
            <p>‚Ä¢ Formato: <strong>.dcm, .DCM</strong></p>
        </div>
        """, unsafe_allow_html=True)
        
        uploaded_files = st.file_uploader(
            "üì§ Selecione os arquivos DICOM",
            type=['dcm', 'DCM'],
            accept_multiple_files=True,
            help=f"Selecione at√© {UPLOAD_LIMITS['max_files']} arquivos DICOM (m√°ximo {UPLOAD_LIMITS['max_size_mb']}MB cada)"
        )
        
        if uploaded_files:
            # VERIFICA LIMITES DE SEGURAN√áA
            is_valid, message = check_upload_limits(uploaded_files)
            
            if not is_valid:
                st.error(f"‚ùå {message}")
                log_security_event("UPLOAD_BLOCKED", message)
            else:
                total_size = sum(f.size for f in uploaded_files)
                
                # VALIDA CADA ARQUIVO
                valid_files = []
                for file in uploaded_files:
                    file_copy = BytesIO(file.getvalue())  # Cria c√≥pia para valida√ß√£o
                    if validate_dicom_file(file_copy):
                        valid_files.append(file)
                    else:
                        st.warning(f"‚ö†Ô∏è Arquivo {file.name} n√£o √© um DICOM v√°lido e foi ignorado")
                
                if valid_files:
                    st.success(f"‚úÖ {len(valid_files)} arquivo(s) v√°lido(s) - {get_file_size(total_size)}")
                    
                    # Mostrar tamanho de cada arquivo
                    for file in valid_files:
                        st.markdown(f"""
                        <div class='uploaded-file'>
                            üìÑ {file.name}
                            <div class='file-size'>{get_file_size(file.size)}</div>
                        </div>
                        """, unsafe_allow_html=True)
                else:
                    st.error("‚ùå Nenhum arquivo DICOM v√°lido encontrado")
                    log_security_event("NO_VALID_FILES", "Nenhum arquivo DICOM v√°lido no upload")

    if uploaded_files:
        selected_file = st.selectbox("üìã Selecione o exame para an√°lise:", [f.name for f in uploaded_files])
        dicom_file = next((f for f in uploaded_files if f.name == selected_file), None)
        
        if dicom_file:
            tmp_path = None
            try:
                # VALIDA√á√ÉO FINAL DE SEGURAN√áA
                file_copy = BytesIO(dicom_file.getvalue())
                if not validate_dicom_file(file_copy):
                    st.error("‚ùå Arquivo corrompido ou inv√°lido")
                    log_security_event("FINAL_VALIDATION_FAILED", f"Arquivo {selected_file} falhou na valida√ß√£o final")
                    return
                
                with tempfile.NamedTemporaryFile(delete=False, suffix='.dcm') as tmp_file:
                    tmp_file.write(dicom_file.getvalue())
                    tmp_path = tmp_file.name
                
                dataset = pydicom.dcmread(tmp_path)
                
                # SANITIZA DADOS SENS√çVEIS
                dataset = sanitize_patient_data(dataset)
                
                dicom_data = {
                    'file_name': selected_file,
                    'file_size': get_file_size(dicom_file.size),
                    'patient_name': safe_dicom_value(getattr(dataset, 'PatientName', 'N/A')),
                    'patient_id': safe_dicom_value(getattr(dataset, 'PatientID', 'N/A')),
                    'modality': safe_dicom_value(getattr(dataset, 'Modality', 'N/A')),
                    'study_date': safe_dicom_value(getattr(dataset, 'StudyDate', 'N/A'))
                }
                
                tab1, tab2, tab3, tab4, tab5 = st.tabs(["üî¨ Visualiza√ß√£o", "üë§ Identifica√ß√£o", "‚öôÔ∏è T√©cnico", "üìä An√°lise", "üìö RA-Index"])
                
                report_data = {}
                image_for_report = None
                
                with tab1:
                    if hasattr(dataset, 'pixel_array'):
                        image = dataset.pixel_array
                        if image.dtype != np.uint8:
                            image = ((image - image.min()) / (image.max() - image.min()) * 255).astype(np.uint8)
                        
                        fig = create_medical_visualization(image, f"Exame: {selected_file}")
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # Salvar imagem para relat√≥rio
                        plt.figure(figsize=(8, 8))
                        plt.imshow(image, cmap='gray')
                        plt.axis('off')
                        plt.title(f"An√°lise DICOM - {selected_file}")
                        img_buffer = BytesIO()
                        plt.savefig(img_buffer, format='png', bbox_inches='tight', pad_inches=0.1)
                        img_buffer.seek(0)
                        image_for_report = Image.open(img_buffer)
                        plt.close()
                    else:
                        st.warning("‚ö†Ô∏è Arquivo DICOM n√£o cont√©m dados de imagem")
                
                with tab2:
                    st.markdown('<div class="card patient-card">', unsafe_allow_html=True)
                    st.subheader("üë§ Dados de Identifica√ß√£o")
                    
                    patient_info = {
                        'Nome': safe_dicom_value(getattr(dataset, 'PatientName', 'N/A')),
                        'ID': safe_dicom_value(getattr(dataset, 'PatientID', 'N/A')),
                        'Idade': safe_dicom_value(getattr(dataset, 'PatientAge', 'N/A')),
                        'Sexo': safe_dicom_value(getattr(dataset, 'PatientSex', 'N/A')),
                        'Data do Estudo': safe_dicom_value(getattr(dataset, 'StudyDate', 'N/A')),
                        'Modalidade': safe_dicom_value(getattr(dataset, 'Modality', 'N/A')),
                        'M√©dico': safe_dicom_value(getattr(dataset, 'ReferringPhysicianName', 'N/A')),
                        'Institui√ß√£o': safe_dicom_value(getattr(dataset, 'InstitutionName', 'N/A'))
                    }
                    
                    cols = st.columns(2)
                    for i, (key, value) in enumerate(patient_info.items()):
                        with cols[i % 2]:
                            st.markdown(f"""
                            <div style='background: #333333; padding: 12px; border-radius: 8px; margin: 8px 0;'>
                                <span class='metric-label'>{key}</span><br>
                                <span class='metric-value'>{value}</span>
                            </div>
                            """, unsafe_allow_html=True)
                    
                    st.markdown('</div>', unsafe_allow_html=True)
                
                with tab3:
                    st.markdown('<div class="card tech-card">', unsafe_allow_html=True)
                    st.subheader("‚öôÔ∏è Informa√ß√µes T√©cnicas")
                    
                    tech_info = {
                        'Modalidade': safe_dicom_value(getattr(dataset, 'Modality', 'N/A')),
                        'Tamanho': f"{safe_dicom_value(getattr(dataset, 'Rows', 'N/A'))} √ó {safe_dicom_value(getattr(dataset, 'Columns', 'N/A'))}",
                        'Bits por Pixel': safe_dicom_value(getattr(dataset, 'BitsAllocated', 'N/A')),
                        'Janela Central': safe_dicom_value(getattr(dataset, 'WindowCenter', 'N/A')),
                        'Largura da Janela': safe_dicom_value(getattr(dataset, 'WindowWidth', 'N/A')),
                        'Espessura de Corte': safe_dicom_value(getattr(dataset, 'SliceThickness', 'N/A'))
                    }
                    
                    cols = st.columns(2)
                    for i, (key, value) in enumerate(tech_info.items()):
                        with cols[i % 2]:
                            st.markdown(f"""
                            <div style='background: #333333; padding: 12px; border-radius: 8px; margin: 8px 0;'>
                                <span class='metric-label'>{key}</span><br>
                                <span class='metric-value'>{value}</span>
                            </div>
                            """, unsafe_allow_html=True)
                    
                    st.markdown('</div>', unsafe_allow_html=True)
                
                with tab4:
                    if hasattr(dataset, 'pixel_array'):
                        image = dataset.pixel_array
                        report_data = {
                            'dimensoes': f"{image.shape[0]} √ó {image.shape[1]}",
                            'min_intensity': int(np.min(image)),
                            'max_intensity': int(np.max(image)),
                            'media': f"{np.mean(image):.2f}",
                            'desvio_padrao': f"{np.std(image):.2f}",
                            'total_pixels': f"{image.size:,}"
                        }
                        
                        # Bot√µes de relat√≥rio
                        col1, col2 = st.columns(2)
                        with col1:
                            if st.button("üìß Enviar Relat√≥rio por Email", help="Envia relat√≥rio completo para wenndell.luz@gmail.com"):
                                if send_email_report(st.session_state.user_data, dicom_data, image_for_report, report_data):
                                    st.success("‚úÖ Relat√≥rio enviado para wenndell.luz@gmail.com")
                                    st.info("üìã Uma c√≥pia foi enviada para o administrador do sistema para auditoria e melhoria cont√≠nua")
                                    log_security_event("USER_NOTIFIED", "Usu√°rio informado sobre envio de c√≥pia")

                        with col2:
                            pdf_report = create_pdf_report(st.session_state.user_data, dicom_data, report_data)
                            st.download_button(
                                label="üìÑ Baixar Relat√≥rio PDF",
                                data=pdf_report,
                                file_name=f"relatorio_{selected_file.split('.')[0]}.pdf",
                                mime="application/pdf",
                                help="Baixe relat√≥rio completo em PDF"
                            )
                        
                        # Se√ß√£o de feedback
                        show_feedback_section({
                            'dicom_data': dicom_data,
                            'report_data': report_data,
                            'user': st.session_state.user_data,
                            'timestamp': datetime.now().isoformat()
                        })
            with tab5:
        # Se√ß√£o do √çndice RA
        show_ra_index_section()

            except Exception as e:
                error_msg = f"Erro ao processar arquivo: {str(e)}"
                st.error(f"‚ùå {error_msg}")
                log_security_event("PROCESSING_ERROR", error_msg)
                
            finally:
                # Limpar arquivo tempor√°rio
                if tmp_path and os.path.exists(tmp_path):
                    try:
                        os.unlink(tmp_path)
                    except Exception as e:
                        log_security_event("CLEANUP_ERROR", f"Erro ao limpar arquivo tempor√°rio: {e}")
    else:
        show_dashboard()

def main():
    """Fun√ß√£o principal"""
    try:
        # Verificar depend√™ncias
        missing_deps = check_dependencies()
        if missing_deps:
            st.error(f"‚ùå Depend√™ncias missing: {', '.join(missing_deps)}")
            log_security_event("MISSING_DEPENDENCIES", f"Depend√™ncias faltando: {missing_deps}")
            return
        
        # Inicializa√ß√£o completa das vari√°veis de sess√£o
        if 'authenticated' not in st.session_state:
            st.session_state.authenticated = False
        if 'user_data' not in st.session_state:
            st.session_state.user_data = {}
        if 'feedback_submitted' not in st.session_state:
            st.session_state.feedback_submitted = False
        if 'uploaded_files' not in st.session_state:
            st.session_state.uploaded_files = []
        if 'current_file' not in st.session_state:
            st.session_state.current_file = None
            
        log_security_event("APP_START", "Aplicativo iniciado")
        
        if not st.session_state.authenticated:
            show_login_page()
        else:
            show_main_app()
            
    except Exception as e:
        error_msg = f"Erro cr√≠tico: {str(e)}"
        log_security_event("APP_CRASH", error_msg)
        st.error("‚ùå Erro cr√≠tico no aplicativo. Os administradores foram notificados.")

# Inicializar banco e executar aplica√ß√£o
init_database()

if __name__ == "__main__":
    main()
